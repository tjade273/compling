(* The SCA scoring function takes two IPA-encoded characters 
and returns a sound-class based score *)

type dolgo_class = char

(* Matrix derived from

 List, Johann-Mattis and Forkel, Robert (2016): LingPy. A Python library for historical linguistics. Version 2.5. URL: http://lingpy.org, DOI: https://zenodo.org/badge/latestdoi/5137/lingpy/lingpy. With contributions by Steven Moran, Peter Bouda, Johannes Dellert, Taraka Rama, Frank Nagel, and Simon Greenhill. Jena: Max Planck Institute for the Science of Human History.

 *)
  
let dolgo_matrix : (dolgo_class * (dolgo_class * float) list) list  = [
    ('+',[('+',0.00); ('0',-100.00); ('1',-100.00); ('H',-100.00); ('J',-100.00); ('K',-100.00); ('M',-100.00); ('N',-100.00); ('P',-100.00); ('R',-100.00); ('S',-100.00); ('T',-100.00); ('V',-100.00); ('W',-100.00); ('X',-5.00); ('_',-100.00); ]); 
('0',[('+',-100.00); ('0',0.00); ('1',0.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',0.00); ('W',0.00); ('X',0.00); ('_',0.00); ]); 
('1',[('+',-100.00); ('0',0.00); ('1',2.00); ('H',-20.00); ('J',-20.00); ('K',-20.00); ('M',-20.00); ('N',-20.00); ('P',-20.00); ('R',-20.00); ('S',-20.00); ('T',-20.00); ('V',-20.00); ('W',-20.00); ('X',0.00); ('_',1.00); ]); 
('H',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',10.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('J',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',10.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('K',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',10.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('M',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',10.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('N',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',10.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('P',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',10.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('R',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',10.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('S',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',10.00); ('T',0.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('T',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',10.00); ('V',-10.00); ('W',0.00); ('X',0.00); ('_',-20.00); ]); 
('V',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',-10.00); ('J',-10.00); ('K',-10.00); ('M',-10.00); ('N',-10.00); ('P',-10.00); ('R',-10.00); ('S',-10.00); ('T',-10.00); ('V',5.00); ('W',-10.00); ('X',0.00); ('_',-20.00); ]); 
('W',[('+',-100.00); ('0',0.00); ('1',-20.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',-10.00); ('W',10.00); ('X',0.00); ('_',-20.00); ]); 
('X',[('+',-5.00); ('0',0.00); ('1',0.00); ('H',0.00); ('J',0.00); ('K',0.00); ('M',0.00); ('N',0.00); ('P',0.00); ('R',0.00); ('S',0.00); ('T',0.00); ('V',0.00); ('W',0.00); ('X',0.00); ('_',0.00); ]); 
('_',[('+',-100.00); ('0',0.00); ('1',1.00); ('H',-20.00); ('J',-20.00); ('K',-20.00); ('M',-20.00); ('N',-20.00); ('P',-20.00); ('R',-20.00); ('S',-20.00); ('T',-20.00); ('V',-20.00); ('W',-20.00); ('X',0.00); ('_',2.00); ]);]


let token_to_char t =
  match t with
  | Handle -> '+'
  | Gap -> '_'
  | Token(c, _) -> c 
             

let dolgo_score a b c =
  List.assoc (token_to_char b) (List.assoc (token_to_char a) dolgo_matrix)
             
let dolgo_of_string s =
  let c = match s with 
  |"a"|"ᴀ"|"ã"|"ɑ"|"á"|"à"|"ā"|"ǎ"|"ụ"|"ū"|"â"|"ɛ"|"æ"|"ɜ"|"ɐ"|"ʌ"|"e"|"ᴇ"|"ə"|"ẽ"|"ɘ"
   |"ɤ"|"è"|"é"|"ē"|"ě"|"ê"|"ɚ"|"Œ"|"ɒ"|"œ"|"ɞ"|"ɔ"|"ø"|"ɵ"|"o"|"õ"|"ó"|"ò"|"ō"|"ô"|
     "y"|"ṳ"|"ʏ"|"ʉ"|"u"|"ᴜ"|"ʊ"|"i"|"ɪ"|"ɨ"|"ɿ"|"ʅ"|"ɯ"|"ĩ"|"í"|"ǐ"|"ì"|"î"|"ī"|"ɶ"|
       "ɷ"|"ı"|"ǝ"|"ǒ"|"ĭ"|"ŏ"|"ẽ"|"ä"|"ö"|"ǒ"|"ĭ"|"ŏ"|"ŭ"|"ў"|"ă"|"ĕ"|"ü"|"ú"|"ũ"|
         "ṵ"|"ʮ"|"ɩ"|"ỹ"|"ε"|"ù"|"е"|"ï"|"ǔ"|"ạ"|"ụ"|"ọ"|"ỳ"|"ȯ"|"û"|"а"|"ę"|"û"|"ị"|
           "ý"|"å"|"ǫ"|"ë"|"ạ"|"ḭ"|"ḛ"|"ๅ"|"ố"|"ў"|"ȇ"|"ȗ"|"ᴇ"|"ε"|"ṍ"|"ṹ" -> 'V'
  |"t͡s"|"t͜s"|"d͡z"|"d͜z"|"ʦ"|"ʣ"|"t͡ɕ"|"t͜ɕ"|"d͡ʑ"|"d͜ʑ"|"ʨ"|"ʥ"|"t͡ʃ"|"ʄ"|
     "t͜ʃ"|"d͡ʒ"|"d͜ʒ"|"ʧ"|"ʤ"|"c"|"ɟ"|"t͡ʂ"|"t͜ʂ"|"d͡ʐ"|"d͜ʐ"|"č"|"t͡θ"|"t͜θ"|
       "k"|"g"|"q"|"ɢ"|"ɡ"|"x"|"ɣ"|"χ"|"ǰ"|"ĵ"|"ḳ"|"ǥ"|"ǵ"|"ḡ"|"t͡ʂ"|"Ɉ"|"ʈʂ"|"ɖʐ"|
         "ʈʂʰ"|"tɕ"|"tɕʰ"|"dʑ"|"ts"|"dz"|"tsʰ"|"ɸ͡x" -> 'K'
  |"ɸ"|"β"|"f"|"p͡f"|"p͜f"|"ƀ"|"p"|"b"|"ɓ"|"р"|"ᵐb"|"ᵐp"|"ḇ"|"bv"|"b͡v"|"pf" -> 'P'
  |"ʔ"|"ħ"|"ʕ"|"h"|"ɦ"|"ḥ"|"Ɂ"|"ʡ"|"'ʷ" -> 'H'
  |"j"|"ɥ"|"ɰ" -> 'J'
  |"m"|"ɱ"|"ʍ"|"ṃ" -> 'M'
  |"n"|"ȵ"|"ɳ"|"ŋ"|"ɴ"|"ň"|"ń"|"ɲ"|"∼"|"ṇ"|"ñ"|"ῃ"|"ņ"|"ṋ"|"ɴ" -> 'N'
  |"s"|"z"|"∫"|"ʃ"|"ʒ"|"ʂ"|"ʐ"|"ç"|"ʝ"|"š"|"ž"|"ɕ"|
     "ʑ"|"ɧ"|"ś"|"ṣ"|"ß"|"ŝ"|"ż"|"ẓ" -> 'S'
  |"ɹ"|"ɻ"|"ʀ"|"ɐ̯"|"ɾ"|"r"|"ʁ"|"ɽ"|"l"|"ȴ"|"l"|"ɭ"|"ʎ"|"ʟ"|"ɬ"|"ɮ"|"ɫ"|"ł"|"ɺ"|"ḷ"
   |"ṛ́"|"ṛ"|"ļ"|"ᵲ"|"ř"|"ȓ"|"ṙ" -> 'R'
  |"t"|"d"|"ȶ"|"ȡ"|"ɗ"|"ʈ"|"ɖ"|"θ"|"ð"|"ŧ"|"þ"|"đ"|"т"|"ṱ"|"ṭ"|"ḍ"|"ḏ"|"ţ"|"Ɵ" -> 'T'
  |"w"|"ʋ"|"v"|"ʙ"|"ⱱ"|"ṿ"|"ṽ"|"υ" -> 'W'
  |"+" -> '+'
  |"₁₁"|"₂₂"|"¹¹"|"²²"|"₁₂"|"₁₃"|"₁₄"|"₁₅"|"₂₃"|"₂₄"|"₂₅"|"₃₄"|"₃₅"|"₄₅"|"¹²"|"¹³"|"¹⁴"|"¹⁵"|"²³"|"²⁴"|"²⁵"|"³⁵"|"³⁴"|"⁴⁵"|"₅₁"|"₅₂"|"₅₃"|"₅₄"|"₄₃"|"₄₂"|"₄₁"|"₃₂"|"₃₁"|
     "₂₁"|"⁵¹"|"⁵²"|"⁵³"|"⁵⁴"|"⁴¹"|"⁴²"|"⁴³"|"³¹"|"³²"|"²¹"|"₃₃"|"³³"|"₄₄"|"₅₅"|
       "⁵⁵"|"⁴⁴"|"⁰"|"¹"|"²"|"³"|"⁴"|"⁵"|"⁻"|"₁"|"₂"|"₃"|"₄"|"₅"|"₆"|"₀"|"˥"|
         "˦"|"˨"|"˧" -> '1'
  |"_"|"#"|"◦"|"·" -> '_'
  | c -> print_string ("Unknown character: "^c); 'V'
  in
  Token(c,s)

let dolgo_align =
  align
    (fun (i1, j1, s1) (i2, j2, s2) -> (max i1 i2, max j1 j2))
    [] dolgo_score

  
